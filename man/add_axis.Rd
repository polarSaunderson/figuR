% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_axis.R
\name{add_axis}
\alias{add_axis}
\title{Add easily customisable axes to a plot}
\usage{
add_axis(
  axis,
  labels = NULL,
  interval = NULL,
  meshlines = NULL,
  alignMidPoints = FALSE,
  gridEvery = NULL,
  gridFirst = NULL,
  gridKula = "#E6E6E6AA",
  gridLwd = 1,
  gridType = 1,
  tickEvery = NULL,
  tickFirst = NULL,
  tickKula = "#1A1A1AFF",
  tickLength = 0.2,
  axisKula = "#1A1A1AFF",
  axisLwd = 1,
  axisType = 1,
  labelEvery = NULL,
  labelFirst = NULL,
  labelCex = 0.92,
  labelKula = "#4D4D4DFF",
  labelOffset = NULL,
  labelSrt = NULL,
  name = NULL,
  nameSide = NULL,
  nameCex = 1,
  nameKula = "#1A1A1AFF",
  nameOffset = NULL,
  nameSrt = NULL
)
}
\arguments{
\item{axis}{Which side of the plot should the axis be added to? 1 = bottom;
2 = left; 3 = top; 4 = right.}

\item{labels}{Which labels should be displayed beside the axis? If
  provided, this argument is also used to define the number of scaffold
  meshlines. It usually makes most sense to provide a vector of numbers,
  but strings can also be provided, which allows values such as "<0" on the
  axis, for example.

  **NOTE** The function assumes that all values in the 'labels' vector are
  equally spaced. For example, both `c(2, 4, 6, 8)` and `c(-1, "a", 0,
  7.7)` would create 4 equally split meshlines in the same locations. The
  difference would just be the label beside the meshline. There is no check
  that the values entered correspond to the real value of the location. The
  labels should therefore be considered as decorative features.

  **NOTE**: The name of this argument can be a misnomer depending on how it
  is used. For example, if 'labelEvery' is not 1, then some of the values
  entered as 'labels' will be skipped over. It is necessary to provide all
  possible labels (e.g. `c(1:8)`), and then use 'labelEvery' and
  'labelFirst' to establish which should be displayed.

  If this argument is not provided, and the scaffold is built using the
  'meshlines' or 'interval' arguments, then the labels will default to
  their true values. Only one of these three arguments can be used at once;
  the order of priority is 1. 'labels'; 2. 'interval'; and 3. 'meshlines'.}

\item{interval}{What interval is between the scaffolding meshlines?
Automatically identifies the minimum and maximum values of the plot's
axis and uses [seq()] to calculate the intermediate tick locations. See
also the 'meshlines' and 'labels' argument. Only one of these three
arguments can be used at once; the order of priority is 1. 'labels'; 2.
'interval'; and 3. 'meshlines'.}

\item{meshlines}{numeric: How many lines is the scaffold made up of?
Include all possible meshlines, including those that would fall at the
minimum and maximum values on the axis. See also the 'interval' and
'labels' arguments. Only one of these three arguments can be used at
once; the order of priority is 1. 'labels'; 2. 'interval'; and 3.
'meshlines'.}

\item{alignMidPoints}{BINARY: Should the values be aligned midway between
  the scaffold meshlines? The default is FALSE, which is necessary for a
  scatter plot and makes sure that tickmarks line up with the correct point
  value.

  Set as TRUE for a plot such as an image of a matrix or a barchart, where
  the ticks can sit in the centre of the column (i.e. the value of the tick
  refers to a 2D shape).

  See the examples for a visual explanation of this difference. If still
  unsure, call [plot()] using `axes = TRUE` and add dummy data with this
  function to see what aligns and what makes sense.}

\item{gridEvery}{numeric: Gridlines across the full plot should be added
every how many lines of the scaffold mesh? If NULL, matches 'labelEvery';
see there for details on the accepted input.}

\item{gridFirst}{numeric: Which line of the scaffold mesh should the first
gridline be added to? 'gridEvery' subsequently counts meshlines from
this line. If NULL (default), matches 'labelFirst'; see there for details
on the accepted input.}

\item{gridKula}{What colour should the gridlines be? Defaults to a
mid-grey.}

\item{gridLwd}{numeric: How thick should the gridlines be? If 0, the
drawing of gridlines is suppressed.}

\item{gridType}{numeric: What line type should the gridlines be? See the
'axisType' argument. If 0, the drawing of gridlines is suppressed.}

\item{tickEvery}{Tickmarks should be drawn every how many lines of the
scaffold mesh? If NULL, matches 'labelEvery'; see there for details on
the accepted input.}

\item{tickFirst}{numeric: Which line of the scaffold mesh should the first
tickmark be added to? 'tickEvery' subsequently counts mesh lines from
this line. If NULL (default), matches 'labelFirst'; see there for details
on the accepted input.}

\item{tickKula}{What colour should the tickmarks be? Defaults to black.}

\item{tickLength}{numeric: How long should the tickmarks be? Works based on
the `tcl` argument of [axis()] (but reversed so positive values go away
from the axis). See [par()] for more details.}

\item{axisKula}{What colour should the axis line be?}

\item{axisLwd}{How thick should the axis line be?}

\item{axisType}{numeric: What type of line should the axis line be? Use
numeric values for (1) solid; (2) dashed; (3) dotted lines; (4)
dot-dashed ; (5) long dashed ; and (6) dash-dotted.}

\item{labelEvery}{numeric: Labels should be added every how many lines of
  the scaffold mesh? If a single value is provided, it is sequenced into
  the provided labels (or an automated calculation of them if labels is
  NULL), starting from the 'labelFirst' argument. If a vector is provided,
  it is used to directly index into the labels. Use the index of the
  scaffold meshlines, **NOT** the actual values of the labels.

  Meshlines are counted along y-axes from the bottom upwards, and along
  x-axes from the left to the right.

  By default, the function will set this as 2, unless that provides less
  than 5 labels, in which case, it is set as 1.}

\item{labelFirst}{numeric: Which line of the scaffold mesh should the first
label be added to? 'labelEvery' subsequently counts mesh lines from this
line. Provide the index, not the label value. Default is to match
'labelEvery'.}

\item{labelCex}{numeric: What font size should the label text be?}

\item{labelKula}{What colour should the label text be?}

\item{labelOffset}{numeric: How far from the axis should the labels be?
Works on the 'offset' argument of [text()].}

\item{labelSrt}{numeric: What angle should the label text be set at?
Positive values rotate the text clockwise (i.e. the tops of the letters
move right).}

\item{name}{"string": What does the axis show?}

\item{nameSide}{numeric: Which side of the axis (**NOT** the plot), should
the name be added? Default is to the outside of the axis.}

\item{nameCex}{numeric: What font size should the name text be?}

\item{nameKula}{What colour should the name text be?}

\item{nameOffset}{numeric: How far from the axis should the name be? Works
as the second value in the vector for the 'adj' argument of [text()], but
reversed so positive values move away from the axis; the first value in
the vector is kept at 0.5 to centre the text.}

\item{nameSrt}{numeric: What angle should the name text be set at? Positive
values rotate the text clockwise (i.e. the tops of the letters move
right).}
}
\description{
The syntax and logic for customising axes in R are not
  intuitive to me. This function allows different parts of an axis to be
  customised with more clarity.

  **IMPORTANT**
  This function **ONLY** works correctly if called after
  using [plot()] with the 'xaxs' and 'yaxs' **BOTH** set to "i". If not,
  the numbers on the axis will not correspond correctly to the location of
  the values. See examples.

  Everything is based on a 'scaffold' of meshlines, which the tickmarks,
  gridlines and labels all align to.

  **Labels**:
  The values that are indicated along the axis (e.g. 0, 1, 2, ...)

  **Ticks**:
  The notch along the axis that shows the precise location the
  labels refer to.

  **Gridlines**:
  Lines that extend from the axis to the opposite side of
  the plot. To suppress them and just add an axis, set 'gridLwd' as 0.

  By default, these three all tend to align with each other, but they can
  be offset, or only a subset can be included. For example, tick marks can
  be included every 4 meshlines, gridlines every 2, and a label every 1.

  Additionally, keep in mind these definitions when reading this
  documentation:

  **Axis**:
  The actual axis line along the side of the plot.

  **Name**:
  The name of the axis indicates what the values refer to, for
  example "Temperature (K)".
}
