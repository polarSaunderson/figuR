% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_axis.R
\name{add_axis}
\alias{add_axis}
\title{Add highly customisable axes to a plot}
\usage{
add_axis(
  axis,
  tickSeq = NULL,
  tickCount = NULL,
  alignMidPoints = FALSE,
  tickEvery = NULL,
  tickFirst = NULL,
  tickLength = 0.2,
  tickKula = "#1A1A1AFF",
  labels = NULL,
  labelEvery = 2,
  labelFirst = NULL,
  labelOffset = NULL,
  labelCex = 0.92,
  labelSrt = NULL,
  labelKula = "#4D4D4DFF",
  axisLwd = 1,
  axisType = 1,
  axisKula = "#1A1A1AFF",
  name = NULL,
  nameAxis = NULL,
  nameKula = "#1A1A1AFF",
  nameCex = 1,
  nameOffset = NULL,
  nameSrt = NULL,
  gridEvery = NULL,
  gridFirst = NULL,
  gridLwd = 1,
  gridType = 1,
  gridKula = "#E6E6E6AA"
)
}
\arguments{
\item{axis}{numeric: Which side of the plot should the axis be add to? 1
bottom, 2 left, 3 top, 4 right.}

\item{tickCount}{numeric: How many ticks should be created? Include the
ticks that would fall at the minimum and maximum values. See also the
'interval' and 'labels' arguments. Only one of these three can be used,
with the priority being 1. 'labels', 2. 'interval', 3. 'tickCount'.}

\item{alignMidPoints}{BINARY: Should the scaffolding be aligned midway
  between values? The default is FALSE, which is necessary for a scatter
  plot - the ticks should line up with a single point value.

  Set as TRUE for a plot such as an image of a matrix or a barchart, where
  the ticks can sometimes sit in the  centre of the column. See the
  examples for a visual explanation. If still unsure, call [plot()] using
  `axes = TRUE` and add dummy data to see what aligns and what makes sense.}

\item{tickEvery}{numeric: Draw an actual tick mark every how many
scaffolding poles? If null, matches 'labelEvery'; see there for details.}

\item{tickFirst}{numeric: On which scaffolding pole should be the first
tick mark be shown? Counts from the bottom on the y-axes and the left on
the x-axes. Provide the index, not the corresponding label / value.}

\item{tickLength}{numeric: How long should the tick marks be? Positive
values go outwards from the axis. Works using `tcl`; see [par()] for more
information.}

\item{tickKula}{What colour should the ticks be?}

\item{labels}{Which labels (i.e. axis values) should be displayed beside
  the scaffolding? By default, this is NULL, and the actual numeric values
  are added. However, customisable labels can also be added.

  This argument can be a bit of a misnomer depending on how it is used - if
  labels are provided, the scaffolding is calculated based on the number of
  labels. To leave parts of the axis empty, it is necessary to provide
  labels for all possible scaffolding, but then exclude them with the
  "labelEvery" argument.

  See also the 'interval' and 'tickCount' arguments. Only one of these
  three can be used, with the priority being 1. 'labels', 2. 'interval', 3.
  'tickCount'.}

\item{labelEvery}{numeric: Add a label to every how many scaffold poles? If
a single value is provided, it is sequenced into the provided labels in
increments of that value (starting at the 'labelFirst' argument). If a
vector, it is indexed directly into the labels (i.e. provide the indices,
not the values).}

\item{labelFirst}{numeric: Which should be the first label shown? Counts
from the bottom up on the y-axes and the left across on the x-axes.
Provide the index, not the tick value. Defaults to match 'labelEvery'.}

\item{labelOffset}{numeric: How far away from the axis should the labels be
written? Works on the "offset" argument of [text()].}

\item{labelCex}{numeric: What font size should the label text be?}

\item{labelSrt}{numeric: What angle should the label text be? Positive
values rotate the label clockwise (i.e. the top moves right).}

\item{labelKula}{What colour should the label text be?}

\item{axisLwd}{numeric: How thick should the axis line be?}

\item{axisType}{numeric: What line type should the axis line be? Use
numeric values for (1) solid; (2) dashed; (3) dotted lines; (4)
dot-dashed ; (5) long dashed ; and (6) dash-dotted.}

\item{axisKula}{What colour should the axis line be?}

\item{name}{"string" What is the axis name?}

\item{nameAxis}{numeric: Which side of the axis should the name be added?}

\item{nameKula}{What colour should the name text be?}

\item{nameCex}{What font size should the name text be?}

\item{nameOffset}{numeric: How far from the axis should the name text be?
Works as the second value in the vector for the 'adj' argument of
[text()]; the first is 0.5, to centre the text.}

\item{nameSrt}{What angle should the name text be? Positive values rotate
the label clockwise (i.e. the top moves right).}

\item{gridEvery}{numeric: Add a gridline across the full plot every how
many scaffolding bars? If NULL, matches 'labelEvery'; see there for
details.}

\item{gridFirst}{numeric: Which should be the first gridline shown? Counts
from the bottom up on the y-axes and the left across on the x-axes.
Provide the index, not the tick value.}

\item{gridLwd}{numeric: How thick should the grid lines be? Set this or
'gridType' as 0 to suppress any grid lines.}

\item{gridType}{numeric: What line type should the gridlines be? See the
'axisType' argument. Set this or gridLwd as 0 to suppress grid lines.}

\item{gridKula}{What colour should the gridlines be?}

\item{interval}{numeric: What interval is between the scaffolding mesh? See
also the 'tickCount' and 'labels' arguments. Only one of these three can
be used, with the priority being 1. 'labels', 2. 'interval', 3.
'tickCount'.}
}
\description{
The syntax and logic for customising axes in base R are not
  intuitive (to me). This function allows the different parts of the axis
  to be customised more clearly.

  This function only works properly if called after a [plot()] call where
  `'xaxs' = "i"` and `'yaxs' = "i"`. See examples.

  Everything is based on the concept of a scaffold, which is a mesh that
  the tickmarks, gridlines, and labels align to. By deault, these tend to
  align with each other, but they can be offset, or only a subset of them
  included (for example, add a label every 4 scaffold locations, but a grid
  line every 2, etc.)
}
\examples{
\dontrun{
  # Most simple implementation
  plot(1:10, xaxs = "i", yaxs = "i", axes = FALSE)
  add_axis(1, 1)

  # Use different tick mark spacing
  plot(1:10, xaxs = "i", yaxs = "i", axes = FALSE)
  add_axis(2, tickSeq = 0.25, gridEvery = 2, labelEvery = 4)

  # Compare labels and gridline offsetting (use the "labelFirst" argument)
  plot(1:10, xaxs = "i", yaxs = "i", axes = FALSE)
  add_axis_3(4, tickSeq = 0.5, gridKula = "blue", gridEvery = 2,
             labelEvery = 2, labelFirst = 3, labelKula = "blue")
  add_axis_3(2, tickSeq = 1, gridEvery = 2, gridKula = "red",
             labelEvery = 2, labelKula = "red")
}

\dontrun{
  # Understand alignMidPoint argument; compare these three matrix plots
  # 1) doesn't align
  image(matrix(c(1:144), ncol = 12, byrow = TRUE),
        xaxs = "i", yaxs = "i", axes = FALSE)
  add_axis(1, labels = month.abb[1:12], alignMidPoint = FALSE)

  # 2) Aligned with midpoints
  image(matrix(c(1:144), ncol = 12, byrow = TRUE),
        xaxs = "i", yaxs = "i", axes = FALSE)
  add_axis(1, labels = month.abb[1:12], alignMidPoint = FALSE)

  # 3) An extra label is added to align at the edges
  image(matrix(c(1:144), ncol = 12, byrow = TRUE),
        xaxs = "i", yaxs = "i", axes = FALSE)
  add_axis(1, labels = month.abb[c(1:12, 1)], alignMidPoint = FALSE)
}

}
